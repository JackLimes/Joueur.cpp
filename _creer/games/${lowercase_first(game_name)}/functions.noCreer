<%
if not 'c++' in shared:
    shared['c++'] = {}

    def cpp_default(type_obj, default=None):
        base_type = type_obj['name']
        if default == None:
            if base_type == "string":
                return '""'
            elif base_type == "list":
                return "new std::vector<" + cpp_type(type_obj['valueType']) + ">()"
            elif base_type == "dictionary":
                return 'new std::map<' + cpp_type(type_obj['keyType']) + ", " + cpp_type(type_obj['valueType']) + ">()"
            elif base_type == "int" or base_type == "float":
                return '0'
            elif base_type == "boolean":
                return 'false'
            else: # should be null and GameObjects
                return "NULL"
        else:
            cpp_value(type_obj, default)
    shared['c++']['default'] = cpp_default

    def cpp_value(type_obj, default):
        base_type = type_obj['name']
        if base_type == "string":
            return '"' + default + '"'
        elif base_type == "boolean":
            return str(default).lower()
        elif base_type == "float":
            return str(default) + "f"
        elif base_type == "int":
            return str(default)
        elif base_type == "dictionary" or base_type == "list":
            raise Exception("C++ client does not support default values for dicts/lists, someone should figure that out")
        else: # should be null and GameObjects
            return "nullptr"
    shared['c++']['value'] = cpp_value

    def cpp_type(type_obj):
        base_type = type_obj['name']
        if base_type == "list":
            return "std::vector<" + cpp_type(type_obj['valueType']) + ">"
        elif base_type == "dictionary":
                return 'std::map<' + cpp_type(type_obj['keyType']) + ", " + cpp_type(type_obj['valueType']) + ">"
        elif base_type == "boolean":
            return "bool"
        elif base_type == "string":
            return "std::string"
        elif base_type == "null":
            return "void"
        elif base_type == "int" or base_type == "float":
            return base_type
        else: # it's a game object, so include it's namespace
            return game_name + "::" + base_type + "*"
    shared['c++']['type'] = cpp_type

    def cpp_skippage(obj_key, attr_key, skipPlayerCheck=False):
        if obj_key == "Game":
            if attr_key in ["gameObjects", "name"]:
                return True
        elif obj_key == "Player" and not shipPlayerCheck:
            if attr_key in ["lost", "reasonLost", "reasonWon", "won"]:
                return True
        elif obj_key == "GameObject":
            if attr_key in ["id", "gameObjectName"]:
                return True

        return False
    shared['c++']['skippable'] = cpp_skippage

    def cpp_unserialize_function(attr_parms, ptree_name, list_name = "nullptr"):
        type_name = attr_parms['type']['name']
        if type_name == "boolean":
            type_name = "bool"

        if type_name == "list":
            function_name = "unserializeVector"
            value_type = attr_parms['type']['valueType']
            if not is_primitive_type(value_type):
                function_name += "OfGameObjects<" + cpp_type(value_type) + ">"
            return function_name + "(" + ptree_name + ", " + list_name + ")"

        if type_name == "dictionary":
            raise Exception("C++ client does not support custom dictionaries, someone should figure that out")

        if type_name in ['bool', 'int', 'float', 'string']:
            return 'unserialize' + upcase_first(type_name) + '(' + ptree_name + ')'
        else: # it should be a game object
            return 'unserializeGameObject(' + ptree_name + ')'
    shared['c++']['unserialize_function'] = cpp_unserialize_function

    def cpp_inline_args(parms, optional=False):
        if 'arguments' in parms:
            args = parms['arguments']
            arg_strings = []
            for arg_parms in args:
                arg_string = cpp_type(arg_parms['type']) + " " + arg_parms['name']
                if optional and arg_parms['optional']:
                    arg_string += " = " + cpp_value(arg_parms['type'], arg_parms['default'])
                arg_strings.append(arg_string)

            return ", ".join(arg_strings)
        return ""
    shared['c++']['inline_args'] = cpp_inline_args

    def cpp_cast_type(parms):
        return "" if (not parms or is_primitive_type(parms['type'])) else ("(" + cpp_type(parms['type']) + ")")
    shared['c++']['cast_type'] = cpp_cast_type
%>